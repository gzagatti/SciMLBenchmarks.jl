---
title: Switching dynamics
author: Romain Veltz, Guilherme Zagatti
weave_options:
    fig_ext: ".png"
---

```julia
using PiecewiseDeterministicMarkovProcesses, LinearAlgebra, Random, DifferentialEquations, Sundials, JumpProcesses
const PDMP = PiecewiseDeterministicMarkovProcesses
```

```julia
function AnalyticalSampleCHV(xc0, xd0, ti, nj::Int64)
    xch = [xc0[1]]
    xdh = [xd0[1]]
    th  = [ti]
    t = ti
    while length(th)<nj
        xc = xch[end]
        xd = xdh[end]
        S = -log(rand())
        if mod(xd,2) == 0
            t += 1/10*log(1+10*S/xc)
            push!(xch,xc + 10 * S )
        else
            t += 1/(3xc)*(exp(3S)-1)
            push!(xch,xc * exp(-3S) )
        end
        push!(xdh,xd + 1 )
        push!(th,t)

        S = -log(rand())
    end
    return th, xch, xdh
end

F!(ẋ, xc, xd, parms, t) = (ẋ[1] = mod(xd[1], 2) == 0 ? 10xc[1] : -3xc[1]^2)

R(x) = x

function R!(rate, xc, xd, parms, t, issum::Bool)
    # rate function
    if issum == false
        rate[1] = R(xc[1])
        rate[2] = parms[1]
        return 0., 50. + parms[1]
    else
        return R(xc[1]) + parms[1], 50. + parms[1]
    end
end

@inbounds function f!(du, u, p, t)
    du[1] = mod(u[2], 2) == 0 ? 10*u[1] : -3u[1]^2
    du[2] = 0.
    du[3] = 0.
end

xc0 = [1.0]
xd0 = [0, 0]

nu = [1 0;0 -1]
parms = [.0]
ti = 0.322156
tf = 100000.
nj = 50

errors = Float64[]

Random.seed!(8)
res_a_chv = AnalyticalSampleCHV(xc0,xd0,ti,nj)

problem = PDMP.PDMPProblem(F!, R!, nu, xc0, xd0, parms, (ti, tf))

rate1(u, p, t) = R(u[1])
affect1!(integrator) = (integrator.u[2] += 1; if integrator.u[2] == (nj - 1) terminate!(integrator) end)
urate1(u, p, t) = R(u[1]) * (mod(u[2], 2) == 0 ? exp(10*1.) : 1.)
rateinterval1(u, p, t) = 1.

rate2(u, p, t) = p[1]
affect2!(integrator) = (integrator.u[3] -= 1)

jump1 = VariableRateJump(rate1, affect1!; urate=urate1, rateinterval=rateinterval1)
jump2 = ConstantRateJump(rate2, affect2!)
oprob = ODEProblem(f!, vcat(xc0, xd0), (ti, tf), parms)
jprob = JumpProblem(oprob, CoevolveSynced(), jump1, jump2; dep_graph = [[1], [2]], save_positions = (false, true))

Random.seed!(8)
jres = solve(jprob, AutoTsit5(Rosenbrock23()); save_everystep = false)

println("\n\nSolvers comparison")
for ode in [
    (:lsoda,"lsoda"),
    (Rodas5P(),"rodas5P"),
    (TRBDF2(),"TRBDF2"),
    (CVODE_Adams(),"CVODEAdams"),
    (CVODE_BDF(),"CVODEBDF"),
    (Rodas4P(),"rodas4P"),
    (:cvode,"cvode"),
    (Rosenbrock23(),"Rosenbrock23"),
]
    Random.seed!(8)
    res = PDMP.solve(problem, CHV(ode[1]); n_jumps = nj, abstol = 1e-9, reltol = 1e-7)
    printstyled(color=:green, "\n--> norm difference = ", norm(res.time - res_a_chv[1], Inf64), "  - solver = ",ode[2],"\n")
    Random.seed!(8)
    res = @time PDMP.solve(problem, CHV(ode[1]); n_jumps = nj, abstol = 1e-9, reltol = 1e-7)
    push!(errors,norm(res.time - res_a_chv[1], Inf64))
end
```

